AWSTemplateFormatVersion: '2010-09-09'
Description: Private EKS Cluster with Managed Node Group and streamlined security settings

Parameters:
  AWSAccountId:
    Type: String
    Description: AWS Account ID
  VPCId:
    Type: String
    Description: The VPC ID for the EKS cluster.
  SubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Subnet IDs for the EKS cluster.
  Region:
    Type: String
    Description: AWS Region
  ClusterName:
    Type: String
    Description: Name of the EKS cluster.
  NodeGroupName:
    Type: String
    Description: Name of the Node Group.
  NodeInstanceType:
    Type: String
    Default: t3.medium
    Description: EC2 instance type for the node group.
  NodeGroupMinSize:
    Type: Number
    Default: 2
    Description: Minimum size of the Node Group.
  NodeGroupMaxSize:
    Type: Number
    Default: 4
    Description: Maximum size of the Node Group.
  NodeGroupDesiredSize:
    Type: Number
    Default: 2
    Description: Desired size of the Node Group.
  VpnNetwork:
    Type: String
    Description: Network for Private VPN
  VpcCidr:
    Type: String
    Description: VPC CIDR Block

Resources:
  # Security Group for EKS API Access
  ApiAccessSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for accessing the Kubernetes API from private network.
      VpcId: !Ref VPCId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref VpnNetwork
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  # Security Group for Node Communication
  NodeSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for EKS nodes.
      VpcId: !Ref VPCId
      SecurityGroupIngress:
        - IpProtocol: -1
          CidrIp: !Ref VpcCidr
        - IpProtocol: -1
          SourceSecurityGroupId: !Ref ApiAccessSecurityGroup
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  EKSCluster:
    Type: AWS::EKS::Cluster
    Properties:
      Name: !Ref ClusterName
      ResourcesVpcConfig:
        SubnetIds: !Ref SubnetIds
        SecurityGroupIds:
          - !Ref ApiAccessSecurityGroup
        EndpointPrivateAccess: true
        EndpointPublicAccess: false
      RoleArn: !GetAtt EKSClusterRole.Arn

  ManagedNodeGroup:
    Type: AWS::EKS::Nodegroup
    Properties:
      ClusterName: !Ref EKSCluster
      NodegroupName: !Ref NodeGroupName
      NodeRole: !GetAtt EKSNodeRole.Arn
      Subnets: !Ref SubnetIds
      ScalingConfig:
        MinSize: !Ref NodeGroupMinSize
        MaxSize: !Ref NodeGroupMaxSize
        DesiredSize: !Ref NodeGroupDesiredSize
      InstanceTypes:
        - !Ref NodeInstanceType
      AmiType: AL2_x86_64

  EKSClusterRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: eks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy

  EKSNodeRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly

Outputs:
  ClusterName:
    Value: !Ref EKSCluster
    Description: The name of the EKS cluster.
  NodeGroupName:
    Value: !Ref ManagedNodeGroup
    Description: The name of the Managed Node Group.
